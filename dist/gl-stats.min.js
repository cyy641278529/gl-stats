var GLStats=function(){"use strict";let t={drawArrays(t,e,...n){if(this.__gli){++this.__gli.totalDrawArraysCalls}return t.apply(this,n)},drawElements(t,e,...n){if(this.__gli){++this.__gli.totalDrawElementsCalls}return t.apply(this,n)}};function e(t,e,n){return function(){return n.apply(this,[e,t,...arguments])}}function n(){for(let n in t){let l=t[n];WebGLRenderingContext.prototype[n]=e(n,WebGLRenderingContext.prototype[n],l)}WebGLRenderingContext.prototype.__reset=function(){this.__gli.commands=[];this.__gli.totalDrawArraysCalls=0;this.__gli.totalDrawElementsCalls=0};WebGLRenderingContext.prototype.__inspect=function(){if(this.__gli){return}let t={commands:[],totalDrawArraysCalls:0,totalDrawElementsCalls:0};this.__gli=t;return t}}let l=`
  .glstats {
    position: absolute;
    z-index: 9999;

    padding: 5px;
    width: 150px;
    left: 5px;
    top: 5px;

    font-size: 10px;
    font-family: 'Roboto Condensed', tahoma, sans-serif;
    overflow: hidden;
    user-select: none;
    cursor: default;

    background: rgba(0, 0, 0, 0.6);
    border-radius: 3px;

  }

  .glstats-container {
    display: flex;
    flex-direction: column;
    color: #888;
    white-space: nowrap;
  }

  .glstats-item {
    display: flex;
    flex-direction: row;
    align-items: center;
    text-align: left;
  }

  .flex-1 {
    flex: 1;
  }

  .right {
    text-align: right;
  }
`;let a=document.createElement("style");a.type="text/css";a.textContent=l;document.head.appendChild(a);n();function s(t,e){let n=document.createElement("div");n.className="glstats-item";let l=document.createElement("span");l.className="flex-1";l.textContent=e;let a=document.createElement("span");a.className="flex-1 right";let s=document.createTextNode("");s.nodeValue="n/a";n.appendChild(l);n.appendChild(a);a.appendChild(s);t.appendChild(n);return s}class i{constructor(t,e={}){this._root=document.createElement("div");this._root.className="glstats";let n=document.createElement("div");n.className="glstats-container";this._root.appendChild(n);this._drawcalls=s(n,"Draw Calls");t.appendChild(this._root)}inspect(t){t.__inspect();this._gl=t}reset(){let t=this._gl.__gli;this._drawcalls.nodeValue=t.totalDrawArraysCalls+t.totalDrawElementsCalls;this._gl.__reset()}}return i}();
//# sourceMappingURL=./dist/gl-stats.min.js.map